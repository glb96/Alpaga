#!/usr/bin/python
# -*- coding: utf-8 -*-

# Alpaga
# AnaLyse en PolArisation de la Generation de second hArmonique 

import importlib
import numpy as np
import os 
import pickle
import time
from scipy.optimize import curve_fit

import matplotlib
import matplotlib.cm as cm
import matplotlib.pyplot as plt



############################################################################################
################################# File management  #########################################
############################################################################################ 

def standard_file_name(prefixe, angle=False, iteration=False, extention='.dat'):
    '''
    Define how to built the file name of an acquisition. 
    
    You may define your own function if your file does not follow the same structure. However, we warmly recommend to use the same input/output for this function as follow:
    
    Parameters
    ----------
    prefixe : str
        The prefix 
    angle : str or bool
        [Optional] If not bool, update the name of the file with this 'angle' value.
    iteration : str or bool
        [Optional] If not bool, update the name of the file with this 'iteration' value.
    extention : str
        [Optional] The extention of the spectra file. Default value: '.dat'    
    
    Returns
    -------
    name : str
        the name of the file. 
    
    Example
    -------
    For this standard function, if the input is:
    *prefixe* = 'polarV'
    *angle* = '42.0'
    *iteration* = '4'
    *extention* = '.dat'
    output is: 'polarV_42.0_4.dat'
    '''
    if isinstance(angle, bool):
        if isinstance(iteration, bool):
            name = prefixe + extention
        else:
            name = prefixe + '_' + iteration + extention
    else:
        if isinstance(iteration, bool):
            name = prefixe + '_' + angle + extention
        else:
            name = prefixe + '_' + angle + '_' + iteration + extention
    return(name)

############################################################################################ 

def third_floor_file_name_builder(prefixe, angle=False, iteration=False, extention='.dat'):
    '''
    The function used to build the name of the file generated by the 3rd floor room.
    '''
    if isinstance(angle, bool): # case where no angle is given 
        if isinstance(iteration, bool): # case where no iteration is given 
            name = prefixe + extention
        else: # case where an iteration is given 
            name = prefixe + '_acq' + iteration + extention
    else: # case where an angle is given 
        if isinstance(iteration, bool):  # case where no iteration is given 
            name = prefixe + '_' + angle + extention
        else:  # case where an iteration is given 
            name = prefixe + '_' + angle + '_acq' + iteration + extention
    return(name)

############################################################################################ 


def transform_name_file(name_t, extention, type_file='single'):
    """
    Internal function of Alpaga.
    Parameters
    ----------
    directory : str
        The directory where is stored the datas
    extention : str
        [Optional] The extention of the spectra file. Default value: '.dat'
    
    Returns
    -------
    prefix_file : str
    For a given input name, *name_t*, cut the name into parts to fit the two possible templates depending on the argument *type_file*. In any case, the extention of the file should match the one given in input *extention*. 
    
    if *type_file* = 'single', the template is: prefix + _ + iter + extention. In this case, this function return: prefix, iter and extention.
    
    if *type_file* = 'angle', the template is: prefix + _ + angle + _ + iter + extention. In this case, this function return: prefix, angle, iter and extention. 
    """
    if type_file=='single':
        if name_t[-len(extention):] != extention: 
            output = False
        else:
            trotter = 0
            prefix_file = ''
            number_iter = ''
            t = -len(extention)-1
            while trotter < 1: # this loop goes from the end of the file name to the begining since the important value for the code, angle and iter, are located at the end. 
                if name_t[t] == '_':
                    trotter += 1 
                elif trotter == 0:
                    number_iter += name_t[t]
                else:
                    raise Exception('WARNING: problem code!!! The file name ' + name_t + ' is not standard! It should be: prefix_iter.dat')
                t = t - 1
                
            prefix_file = name_t[0:t+1]
            number_iter = int(number_iter[::-1]) # the iter value are created in the opposite direction. The real angle value is the opposite
            output = [prefix_file, number_iter]
        
    elif type_file=='angle':
        if name_t[-len(extention):] != extention: 
            output = False
        else:
            trotter = 0
            prefix_file = ''
            angle_t=''
            number_iter = ''
            t = -len(extention)-1
            while trotter < 2: # this loop goes from the end of the file name to the begining since the important value for the code, angle and iter, are located at the end. 
                if name_t[t] == '_':
                    trotter += 1 
                elif trotter == 0:
                    number_iter += name_t[t]
                elif trotter == 1:    
                    angle_t += name_t[t]
                else:
                    raise Exception('WARNING: problem code!!! The file name ' + name_t + ' is not standard! It should be: prefix_angle_iter.dat')
                t = t - 1
                
            prefix_file = name_t[0:t+1]
            # angle_t = float(angle_t[::-1]) # the angle are created in the opposite direction. The real angle value is the opposite
            angle_t = angle_t[::-1] # the angle are created in the opposite direction. The real angle value is the opposite
            number_iter = int(number_iter[::-1]) # the iter value are created in the opposite direction. The real angle value is the opposite
            output = [prefix_file, angle_t, number_iter]
    else:
        raise Exception('WARNING: type_file can only be "single" or "angle".')
    return(output)

############################################################################################

def find_file_iter_from_dir(directory, extention='.dat'):
    """
    Return the prefix (*prefix_file*), the number of iter (*N_iter*) and the extention (*extention*) of a single acquisition located in the repertory *directory*. 
    
    The expected name of the file is: \n
    directory + prefix + _ + i + extention \n
    Where i goes from 1 to *N_iter*. 
    
    Parameters
    ----------
    directory : str
        The directory where is stored the datas
    extention : str
        [Optional] The extention of the spectra file. Default value: '.dat'
    
    
    Returns
    -------
    prefix_file : str
         The prefixe shared by all the spectra iteration. 
    N_iter : int
         The number of iter found for this prefixe. Alpaga has check that all the iter are present to avoid 'File not found' error later on. 
    extention : str
        The extention of the detected spectra file. Same value as in the input
        
    Examples
    --------
    Let's assume that in the directory /home/lama/Datas/Water_acquisition/Test_120sec TOCHANGE, is located the spectra: water_1.dat, water_2.dat, water_3.dat. The prefix of these file is 'water', the total number of iter is *N_iter* = 3, and the extention is .dat . In order to get automatically theses information, use: ::
    
       directory = '/home/lama/Datas/Water_acquisition/Test_120sec'
       prefix, N_iter, extention = alpaga.find_file_iter_from_dir(directory)
       print('The prefix for all the file is: "' + prefix + '" with ' + str(N_iter) + ' iter. The extention is: ' + extention)
    
    """
    print('I will look at file with the extention ' + extention + ' in the directory ' + directory + ' for single acquisition. The type of the files should be: prefix_iter.extention')
    all_file = os.listdir(directory)
    
    L_files_iter= []

    prefix_file_old = False
    
    for KKK in range(0, len(all_file), 1):
        name_t = all_file[KKK]
        output = transform_name_file(name_t, extention, type_file='single')

        if output: # False would mean that the file tested is not valid, and thus skiped. For instance bad format file.         
            prefix_file = output[0]
            number_iter = output[1]
            if not prefix_file_old:
                prefix_file_old = prefix_file
            else:
                if prefix_file_old != prefix_file:
                    raise Exception('There are other file with the same extention but not the same prefix name. Please move these file, or do not use this module to creat the list! If you are looking for angle depend value, use the find_angle_iter_from_dir function.')
               
            L_files_iter.append(number_iter)
       
    N_iter = len(L_files_iter)
    if N_iter == 0:
        raise Exception('WARNING: I have not found any file with the good name type in this directory. Please check!')
        
    # check the number of iter:
    L_files_iter = sorted(L_files_iter)
    if len(L_files_iter) != L_files_iter[-1]:
        raise Exception('WARNING: There is not enough iter for this file. Please check that there are all the iter.')
        
    N_iter = len(L_files_iter)
    return(prefix_file, N_iter, extention)
    
############################################################################################

def find_angle_iter_from_dir(directory, extention='.dat'):
    """
    Return the prefix (*prefix_file*), the list of the angle (*L_files_angles*) the number of iter (*N_iter*) and the extention (*extention*) of an acquisition located in the repertory *directory*.
    
    The expected name of the file is: \n
    directory + prefix + _ + k + _ + i + extention \n
    Where k goes within all the value of *L_files_angles*. k can be a float (please try to avoid very long decimal angle value) and where i goes from 1 to *N_iter*. 
    
    Parameters
    ----------
    directory : str
        The directory where is stored the datas
    extention : str
        [Optional] The extention of the spectra file. Default value: '.dat'
    
    Returns
    -------
    prefix_file : str
         The prefixe shared by all the spectra iteration. 
    L_files_angles: list of str
         The list of the angle found. *L_files_angles* is a list of string -- to avoid bad behavior if your angles has a name like 4.10. 
    N_iter : int
         The number of iter found for this prefixe. Alpaga has check that all the iter are present for all the angle to avoid 'File not found' error later on. 
    extention : str
        The extention of the detected spectra file. Same value as in the input
        
    Examples
    --------
    Let's assume that in the directory /home/lama/Datas/Water_acquisition/Test_120sec TOCHANGE, is located the spectra: water_4.0_1.dat, water_4.0_2.dat, water_15.0_2.dat, water_15.0_2.dat. The prefix of these file is 'water', the total number of iter is *N_iter* = 2, the list of angle is *L_files_angles* = [4.0, 15.0] and the extention is .dat . In order to get automatically theses information, use: ::
    
       directory = '/home/lama/Datas/Water_acquisition/Test_120sec'
       prefix, L_files_angles, N_iter, extention = alpaga.find_angle_iter_from_dir(directory)
       print('The prefix for all the file is: "' + prefix + '" with ' + str(N_iter) + ' iter. The angle found are ' + str(L_files_angles) + '. The extention is: ' + extention)
       
    """
    print('I will look at file with the extention ' + extention + ' in the directory ' + directory + 'for angle dependent values. The type of the files should be: prefix_angle_iter.extention')
    all_file = os.listdir(directory)
    
    L_files_angles = []
    L_files_iter= []

    prefix_file_old = False
    
    for KKK in range(0, len(all_file), 1):
        name_t = all_file[KKK]
        output = transform_name_file(name_t, extention, type_file='angle')
        if output: # False would mean that the file tested is not valid, and thus skiped. For instance bad format file.           
            prefix_file = output[0]
            angle_t = output[1]
            number_iter = output[2]
          
            if isinstance(prefix_file_old, str) and prefix_file_old != prefix_file:
                raise Exception('WARNING: the prefix to name the different file in the directory' + directory + ' are not the same! Please move the other spectra files!!!')
            prefix_file_old = prefix_file
            
            # print(prefix_file, angle_t, number_iter)
            if L_files_angles: # if there are already other file in the list
                is_found = False
                angle_tt = float(angle_t)
                for k in range(0, len(L_files_angles), 1):
                    angle_test = float(L_files_angles[k])
                    if np.abs(angle_test-angle_tt) < 0.01: # to avoid stupid float comparaison crashes
                        L_files_iter[k].append(number_iter)
                        is_found = True
                if not is_found:
                    # print('not found:', angle_t)
                    L_files_angles.append(angle_t)
                    L_files_iter.append([number_iter])
            else: # if the list is empty, add directly this file
                L_files_angles.append(angle_t)
                L_files_iter.append([number_iter])

    N_angle = len(L_files_angles)
    if N_angle == 0:
        raise Exception('WARNING: I have not found any file with the good name type in this directory. Please check!')
        
    # check the number of iter:
    if len(L_files_iter) != N_angle:
        raise Exception('WARNING: Bug, please check this line and above. Should be a code problem...')
    to_check_iter = sorted(L_files_iter[0])
    if len(to_check_iter) != to_check_iter[-1]:
        raise Exception('WARNING: There is not enough iter for the angle: ' + str(L_files_angles[0]) + '. Please check that for every angle there is the same number of iter!')

    for i in range(0, N_angle-1, 1):
        temp = sorted(L_files_iter[i])
        if len(temp) != len(to_check_iter):
            raise Exception('WARNING: There is not enough iter for the angle: ' + str(L_files_angles[i]) + '. Please check that for every angle there is the same number of iter!')
        for kkk in range(0, len(to_check_iter), 1):
            if temp[kkk] != to_check_iter[kkk]:
                raise Exception('WARNING: There is not enough iter for the angle: ' + str(L_files_angles[i]) + '. Please check that for every angle there is the same number of iter!')
    
    # sort the angle values:
    L_files_angles_float = [float(L_files_angles[k]) for k in range(0, len(L_files_angles))]
    L_element = np.argsort(L_files_angles_float)
    L_files_angles_sorted = []
    for k in range(0, len(L_files_angles), 1):
        L_files_angles_sorted.append(L_files_angles[L_element[k]])
    
    L_files_angles = L_files_angles_sorted
    N_iter = len(to_check_iter) 
    return(prefix_file, L_files_angles, N_iter, extention)
